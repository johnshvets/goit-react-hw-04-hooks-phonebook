{"version":3,"sources":["components/ContactForm/ContactForm.module.css","App.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","contacts","onSubmit","useState","name","setName","number","setNumber","handleChange","target","value","e","preventDefault","contact","reduce","acc","includes","matchContact","alert","trim","id","makeUniqId","className","s","form","htmlFor","label","type","placeholder","onChange","input","button","ContactList","handleClick","contactList","map","onClick","Filter","container","App","setContacts","filter","setFilter","useEffect","savedContacts","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","filterContactsByKeyWord","keyWord","toLowerCase","app","logo","contactsContainer","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd2cfb3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3qMfd\",\"label\":\"ContactForm_label__3HIvt\",\"input\":\"ContactForm_input__19Xwz\",\"button\":\"ContactForm_button__1klcO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IrB3\",\"logo\":\"App_logo__3Zxu7\",\"container\":\"App_container__6SmVy\",\"contactsContainer\":\"App_contactsContainer__QEm0S\",\"title\":\"App_title__2KCwv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__KHUFc\",\"button\":\"ContactList_button__294oK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__GTInE\",\"input\":\"Filter_input__huK9u\"};","import { v4 as makeUniqId } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst ContactForm = ({ contacts, onSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    if (name === \"name\") {\r\n      setName(value);\r\n    }\r\n    if (name === \"number\") {\r\n      setNumber(value);\r\n    }\r\n  };\r\n\r\n  const matchContact = (contact) => {\r\n    const contactNames = contacts.reduce((acc, { name }) => [...acc, name], []);\r\n\r\n    return contactNames.includes(contact);\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isNotUniqContactName = matchContact(name);\r\n\r\n    if (isNotUniqContactName) {\r\n      return alert(`${name} is alredy in contacts!`);\r\n    } else if (name.trim() && number.trim()) {\r\n      const id = makeUniqId();\r\n      const contact = { name, number, id };\r\n\r\n      onSubmit(contact);\r\n      reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.form}>\r\n      <label htmlFor=\"name\" className={s.label}>\r\n        Name\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type name!\"\r\n        name=\"name\"\r\n        value={name}\r\n        onChange={handleChange}\r\n        className={s.input}\r\n        id=\"name\"\r\n      />\r\n\r\n      <label htmlFor=\"number\" className={s.label}>\r\n        Number\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        placeholder=\"Type number!\"\r\n        name=\"number\"\r\n        value={number}\r\n        onChange={handleChange}\r\n        className={s.input}\r\n        id=\"number\"\r\n      />\r\n\r\n      <button type=\"submit\" className={s.button}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.oneOfType([\r\n    PropTypes.array.isRequired,\r\n    PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n  ]),\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, handleClick }) => (\r\n  <ul className={s.contactList}>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li key={id} className={s.contact}>\r\n        <h3 className={name}>Name: {name}</h3>\r\n        <p className={number}>Number: {number}</p>\r\n        <button\r\n          type=\"button\"\r\n          id={id}\r\n          onClick={handleClick}\r\n          className={s.button}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  contact: PropTypes.oneOfType([\r\n    PropTypes.array.isRequired,\r\n    PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n  ]),\r\n  handleClick: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className={s.container}>\r\n    <label>\r\n      Find contacts by name:\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        className={s.input}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport s from \"./App.module.css\";\nimport { useEffect, useState } from \"react\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const savedContacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(savedContacts);\n\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const onContactFormSubmit = (contact) => {\n    setContacts((contacts) => [...contacts, contact]);\n  };\n\n  const filterContactsByKeyWord = () => {\n    const keyWord = filter.toLowerCase();\n\n    return contacts.filter(({ name }) => name.toLowerCase().includes(keyWord));\n  };\n\n  const onFilterContactsChange = ({ target: { value } }) => {\n    setFilter(value);\n  };\n\n  const deleteContact = ({ target }) => {\n    setContacts((contacts) => contacts.filter(({ id }) => id !== target.id));\n  };\n\n  return (\n    <div className={s.app}>\n      <h1 className={s.logo}>Phonebook</h1>\n      <div className={s.container}>\n        <ContactForm\n          contacts={filterContactsByKeyWord()}\n          onSubmit={onContactFormSubmit}\n        />\n        <div className={s.contactsContainer}>\n          <h2 className={s.title}>Contacts</h2>\n          <Filter value={filter} onChange={onFilterContactsChange} />\n          <ContactList\n            contacts={filterContactsByKeyWord()}\n            handleClick={deleteContact}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}